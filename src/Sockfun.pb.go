// Code generated by protoc-gen-go.
// source: Sockfun.proto
// DO NOT EDIT!

/*
Package sockfun is a generated protocol buffer package.

It is generated from these files:
	Sockfun.proto

It has these top-level messages:
	Ipc
	Owner
*/
package sockfun

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type IpcType int32

const (
	IpcType_UnixSocket   IpcType = 10
	IpcType_Pipes        IpcType = 12
	IpcType_Signals      IpcType = 11
	IpcType_FIFO         IpcType = 9
	IpcType_Semaphores   IpcType = 8
	IpcType_MemMappFiles IpcType = 7
	IpcType_MsgQueues    IpcType = 6
)

var IpcType_name = map[int32]string{
	10: "UnixSocket",
	12: "Pipes",
	11: "Signals",
	9:  "FIFO",
	8:  "Semaphores",
	7:  "MemMappFiles",
	6:  "MsgQueues",
}
var IpcType_value = map[string]int32{
	"UnixSocket":   10,
	"Pipes":        12,
	"Signals":      11,
	"FIFO":         9,
	"Semaphores":   8,
	"MemMappFiles": 7,
	"MsgQueues":    6,
}

func (x IpcType) Enum() *IpcType {
	p := new(IpcType)
	*p = x
	return p
}
func (x IpcType) String() string {
	return proto.EnumName(IpcType_name, int32(x))
}
func (x *IpcType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(IpcType_value, data, "IpcType")
	if err != nil {
		return err
	}
	*x = IpcType(value)
	return nil
}
func (IpcType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Ipc struct {
	Name             *string   `protobuf:"bytes,1,req,name=Name" json:"Name,omitempty"`
	Groups           []*Owner  `protobuf:"bytes,2,rep,name=Groups" json:"Groups,omitempty"`
	Type             *IpcType  `protobuf:"varint,3,req,name=Type,enum=sockfun.IpcType" json:"Type,omitempty"`
	File             *Ipc_File `protobuf:"group,4,opt,name=File" json:"file,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Ipc) Reset()                    { *m = Ipc{} }
func (m *Ipc) String() string            { return proto.CompactTextString(m) }
func (*Ipc) ProtoMessage()               {}
func (*Ipc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Ipc) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Ipc) GetGroups() []*Owner {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *Ipc) GetType() IpcType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return IpcType_UnixSocket
}

func (m *Ipc) GetFile() *Ipc_File {
	if m != nil {
		return m.File
	}
	return nil
}

type Ipc_File struct {
	Size             *string `protobuf:"bytes,5,opt,name=Size" json:"Size,omitempty"`
	Device           *string `protobuf:"bytes,13,req,name=Device" json:"Device,omitempty"`
	Inode            *int32  `protobuf:"varint,14,req,name=Inode" json:"Inode,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Ipc_File) Reset()                    { *m = Ipc_File{} }
func (m *Ipc_File) String() string            { return proto.CompactTextString(m) }
func (*Ipc_File) ProtoMessage()               {}
func (*Ipc_File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *Ipc_File) GetSize() string {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return ""
}

func (m *Ipc_File) GetDevice() string {
	if m != nil && m.Device != nil {
		return *m.Device
	}
	return ""
}

func (m *Ipc_File) GetInode() int32 {
	if m != nil && m.Inode != nil {
		return *m.Inode
	}
	return 0
}

type Owner struct {
	Name             *string `protobuf:"bytes,1,req,name=Name" json:"Name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Owner) Reset()                    { *m = Owner{} }
func (m *Owner) String() string            { return proto.CompactTextString(m) }
func (*Owner) ProtoMessage()               {}
func (*Owner) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Owner) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Ipc)(nil), "sockfun.Ipc")
	proto.RegisterType((*Ipc_File)(nil), "sockfun.Ipc.File")
	proto.RegisterType((*Owner)(nil), "sockfun.Owner")
	proto.RegisterEnum("sockfun.IpcType", IpcType_name, IpcType_value)
}

var fileDescriptor0 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x8f, 0xcb, 0x4a, 0xc4, 0x30,
	0x18, 0x85, 0xe9, 0xf4, 0x36, 0xfd, 0x7b, 0x21, 0x06, 0x84, 0xe0, 0x42, 0xcb, 0xac, 0x8a, 0x8b,
	0x2e, 0xea, 0x2b, 0xc8, 0x48, 0x17, 0x75, 0x94, 0xea, 0x03, 0x94, 0xfa, 0xcf, 0x18, 0x6c, 0x93,
	0xd0, 0x4c, 0xbd, 0xbd, 0x91, 0x6f, 0x69, 0xe2, 0xa8, 0xe8, 0x2a, 0x9c, 0x9c, 0x43, 0xbe, 0x2f,
	0x90, 0xb6, 0xb2, 0x7f, 0xda, 0xce, 0xa2, 0x54, 0x93, 0xdc, 0x4b, 0x1a, 0xea, 0x43, 0x5c, 0x7d,
	0x38, 0xe0, 0xd6, 0xaa, 0xa7, 0x09, 0x78, 0xd7, 0xdd, 0x88, 0xcc, 0xc9, 0x17, 0x45, 0x44, 0x4f,
	0x21, 0xb8, 0x9a, 0xe4, 0xac, 0x34, 0x5b, 0xe4, 0x6e, 0x11, 0x57, 0x59, 0xf9, 0xbd, 0x2f, 0x37,
	0x2f, 0x02, 0x27, 0xd3, 0x7b, 0x77, 0x6f, 0x0a, 0x99, 0x6b, 0xd6, 0x59, 0x45, 0x7e, 0x5b, 0xf3,
	0x92, 0xbd, 0xa7, 0x67, 0xe0, 0x6d, 0xf9, 0x80, 0xcc, 0xcb, 0x9d, 0x02, 0xaa, 0xa3, 0xbf, 0x7d,
	0xb9, 0x36, 0xc5, 0xc9, 0x05, 0x78, 0xf6, 0xb4, 0xd8, 0x96, 0xbf, 0x23, 0xf3, 0xcd, 0x30, 0xa2,
	0x19, 0x04, 0x97, 0xf8, 0xcc, 0x7b, 0x64, 0xe9, 0x97, 0x46, 0x0a, 0x7e, 0x2d, 0xe4, 0x03, 0xb2,
	0xcc, 0x44, 0x7f, 0x75, 0x0c, 0xfe, 0x01, 0xff, 0x4f, 0xf6, 0x7c, 0x80, 0xf0, 0x87, 0x9b, 0x01,
	0xdc, 0x0b, 0xfe, 0x6a, 0xff, 0x8a, 0x7b, 0x02, 0x34, 0x02, 0xff, 0x86, 0x2b, 0xd4, 0x24, 0xa1,
	0x31, 0x84, 0x2d, 0xdf, 0x89, 0x6e, 0xd0, 0x24, 0xa6, 0x4b, 0x83, 0xaf, 0xd7, 0x1b, 0x62, 0x91,
	0xd0, 0xe2, 0xd8, 0xa9, 0x47, 0x39, 0x99, 0xd9, 0x92, 0x12, 0x48, 0x1a, 0x1c, 0x9b, 0x4e, 0x29,
	0xeb, 0xa7, 0x49, 0x68, 0x24, 0xa2, 0x46, 0xef, 0x6e, 0x67, 0x9c, 0x4d, 0x0c, 0x3e, 0x03, 0x00,
	0x00, 0xff, 0xff, 0xdc, 0x7b, 0xb7, 0xab, 0x49, 0x01, 0x00, 0x00,
}
